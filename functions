#title           :functions
#description     :defines some useful functions
#author          :zdenek polach ( https://github.com/polachz )
#date            :21.01.2017
#version         :0.1
#usage           :is invoked by Shell Extender main script
#notes           :based on source https://justin.abrah.ms/dotfiles/zsh.html
#==============================================================================
#
# MIT License
#
# Copyright (c) 2017 Zdenek Polach

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#==============================================================================

# List of defined functions:

# extract file - extracts file archive. Choose extractor by file extension
#                Defined only when zsh plugin or sytem command doesn't exist

# dls [dir] - list sub-directories in dir

# dla [dir] - list all sub-directories in dir included .dot files

# dgrep pattern - recursive, case-insensitive grep that excludes binary files

# dfgrep pattern - recursive, case-insensitive grep that excludes binary files
#                   and returns only unique filenames

# psgrep pattern - grep for all processes match specified pattern

# killit pattern - kills any process that matches a regexp passed to it

# tree [dir] - dumps tree file structure from specified dir. 
#              Defined only when system command tree isn't installed

# mcd dir - makes a dir and cd into it

# exip - dumps current public IP address

# ips - dumps local IP addresses

# shell - dumps the shell what you are using


#==============================================================================


# The extract function can be defined as plugin in ZSH or as a 
# system command. check if already exists, if not, define it

unset HELPER_CMD_EXIST_FN

helper_cmd_exist_fn extract 
if [[ "$HELPER_CMD_EXIST_FN" = "no" ]]; then

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjf $1        ;;
            *.tar.gz)         tar xzf $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xf $1         ;;
            *.tbz2)           tar xjf $1        ;;
            *.tgz)            tar xzf $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *.7z)             7zr e $1          ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
   }
fi
unset HELPER_CMD_EXIST_FN

dls () {
 # directory LS
 ls -l $1 | grep "^d" | tr -d "/"
}

dla () {
 # directory LS
 ls -la $1 | grep "^d" | tr -d "/"
}

dgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    grep -iR "$@" * | grep -v "Binary"
}
dfgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    # and returns only unique filenames
    grep -iR "$@" * | grep -v "Binary" | sed 's/:/ /g' | awk '{ print $1 }' | sort | uniq
}

psgrep() {
    if [ ! -z $1 ] ; then
        echo "Grepping for processes matching $1..."
        ps aux | grep $1 | grep -v grep
    else
        echo "!! Need name to grep for"
    fi
}

# Kills any process that matches a regexp passed to it
killit() {
    ps aux | grep -v "grep" | grep "$@" | awk '{print $2}' | xargs sudo kill
}

unset HELPER_CMD_EXIST_FN

helper_cmd_exist_fn tree
if [[ "$HELPER_CMD_EXIST_FN" = "no" ]]; then
  tree () {
      find $@ -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
  }
fi
unset HELPER_CMD_EXIST_FN

# Make a dir and cd into it
mcd () {
    mkdir -p "$@" && cd "$@"
}

# Dump current public IP address
exip () {
    echo -n "Current External IP: "
    curl -s -m 5 http://www.whatismyip.cz/ | grep "class=\"ip\"" | sed -e 's/.*ip">//g' -e 's/<\/div>.*//g'
}

# Dump local IP addresses
ips () {
    ifconfig | grep "inet " | awk '{ print $2 }'
}

# Dump the shell what you are using 
shell () {
  ps | grep `echo $$` | awk '{ print $4 }'
}

